import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from docx import Document
from docx.shared import Inches
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from io import BytesIO

st.set_page_config(page_title="B√°o c√°o c√¥ng t√°c kinh doanh", layout="wide")
st.title("üìä B√°o c√°o c√¥ng t√°c kinh doanh")

def save_bar_chart(data, x_col, y_col, title):
    fig, ax = plt.subplots()
    ax.bar(data[x_col], data[y_col])
    ax.set_title(title)
    ax.set_ylabel(y_col)
    ax.tick_params(axis='x', rotation=45)
    fig.tight_layout()
    buffer = BytesIO()
    fig.savefig(buffer, format='png')
    plt.close(fig)
    buffer.seek(0)
    return buffer

def save_overall_chart(data, x_col, y_col, title):
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.bar(data[x_col], data[y_col])
    ax.set_title(title)
    ax.set_ylabel(y_col)
    ax.tick_params(axis='x', rotation=45)
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f"{height:,.0f}", xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')
    fig.tight_layout()
    buffer = BytesIO()
    fig.savefig(buffer, format='png')
    plt.close(fig)
    buffer.seek(0)
    return buffer

def set_table_border(table):
    tbl = table._tbl
    tblPr = tbl.tblPr if tbl.tblPr is not None else tbl._element.get_or_add_tblPr()
    tblBorders = OxmlElement('w:tblBorders')
    for border_name in ['top', 'left', 'bottom', 'right', 'insideH', 'insideV']:
        border = OxmlElement(f'w:{border_name}')
        border.set(qn('w:val'), 'single')
        border.set(qn('w:sz'), '4')
        border.set(qn('w:space'), '0')
        border.set(qn('w:color'), 'auto')
        tblBorders.append(border)
    tblPr.append(tblBorders)

def export_word_report(tong_quan, full_df, top3, bot3, charts, nhan_xet, filename):
    doc = Document()
    doc.add_heading("B√ÅO C√ÅO ƒê√ÅNH GI√Å", 0)

    doc.add_heading("T·ªïng quan", level=1)
    for k, v in tong_quan.items():
        doc.add_paragraph(f"{k}: {v}")

    doc.add_heading("Nh·∫≠n x√©t", level=1)
    doc.add_paragraph(nhan_xet)

    def add_table(title, df):
        doc.add_heading(title, level=2)
        table = doc.add_table(rows=1, cols=len(df.columns))
        table.style = 'Table Grid'
        hdr_cells = table.rows[0].cells
        for i, col in enumerate(df.columns):
            hdr_cells[i].text = str(col)
        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, val in enumerate(row):
                row_cells[i].text = str(val)
        set_table_border(table)

    add_table("To√†n b·ªô d·ªØ li·ªáu", full_df)
    add_table("Top 3 cao nh·∫•t", top3)
    add_table("Top 3 th·∫•p nh·∫•t", bot3)

    doc.add_heading("Bi·ªÉu ƒë·ªì minh h·ªça", level=1)
    for chart in charts:
        doc.add_picture(chart, width=Inches(5.5))

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

tab1, tab2 = st.tabs(["üìã Ki·ªÉm tra h·ªá th·ªëng ƒëo ƒë·∫øm", "üîå C·∫Øt ƒëi·ªán do ch∆∞a tr·∫£ ti·ªÅn"])

# ---------- TAB 1: PH√ÇN T√çCH H·ªÜ TH·ªêNG ƒêO ƒê·∫æM ---------- #
with tab1:
    uploaded_file = st.file_uploader("üì§ T·∫£i l√™n file Excel ch·ª©a sheet 'Tong hop luy ke'", type=["xlsx"], key="kiemtra")

    if uploaded_file:
        df = pd.read_excel(uploaded_file, sheet_name="Tong hop luy ke", header=None)
        df_cleaned = df.iloc[4:].copy()
        expected_columns = ["STT", "ƒêi·ªán l·ª±c", "1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]

        if df_cleaned.shape[1] < len(expected_columns):
            st.error(f"‚ùå File thi·∫øu c·ªôt. C·∫ßn {len(expected_columns)} c·ªôt, hi·ªán c√≥ {df_cleaned.shape[1]}.")
            st.stop()
        df_cleaned = df_cleaned.iloc[:, :len(expected_columns)]
        df_cleaned.columns = expected_columns

        df_cleaned = df_cleaned[df_cleaned["ƒêi·ªán l·ª±c"].notna()]
        cols_to_num = ["1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
        df_cleaned[cols_to_num] = df_cleaned[cols_to_num].apply(pd.to_numeric, errors='coerce')
        df_cleaned["T·ª∑ l·ªá"] = df_cleaned["T·ª∑ l·ªá"] * 100

        total_current = df_cleaned["T·ªïng c√¥ng t∆°"].sum()
        total_plan = df_cleaned["K·∫ø ho·∫°ch"].sum()
        days_passed = (datetime.now() - datetime(2025, 1, 1)).days
        days_total = (datetime(2025, 9, 30) - datetime(2025, 1, 1)).days
        avg_per_day = total_current / days_passed
        forecast_total = avg_per_day * days_total
        forecast_ratio = forecast_total / total_plan

        danh_gia = "‚úÖ ƒê·∫†T k·∫ø ho·∫°ch" if forecast_ratio >= 1 else "‚ùå CH∆ØA ƒê·∫†T k·∫ø ho·∫°ch"
        nhan_xet = f"D·ª± ki·∫øn ƒë·∫øn 30/09/2025 s·∫Ω ho√†n th√†nh kho·∫£ng {forecast_total:,.0f} thi·∫øt b·ªã, t∆∞∆°ng ƒë∆∞∆°ng {forecast_ratio*100:.2f}%. {danh_gia}"

        df_sorted = df_cleaned.sort_values(by="T·ª∑ l·ªá", ascending=False)
        top_3 = df_sorted.head(3)
        bot_3 = df_sorted.tail(3)

        chart_top = save_bar_chart(top_3, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "Top 3 T·ª∑ l·ªá cao")
        chart_bot = save_bar_chart(bot_3, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "Bottom 3 T·ª∑ l·ªá th·∫•p")
        chart_all = save_overall_chart(df_sorted, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "T·ªïng h·ª£p t·ª∑ l·ªá ho√†n th√†nh")

        st.metric("T·ªïng ƒë√£ th·ª±c hi·ªán", f"{total_current:,}")
        st.metric("K·∫ø ho·∫°ch", f"{total_plan:,}")
        st.metric("D·ª± b√°o ƒë·∫øn 30/09/2025", f"{int(forecast_total):,}")
        st.metric("T·ª∑ l·ªá d·ª± b√°o", f"{forecast_ratio*100:.2f}%")
        st.info(nhan_xet)

        st.subheader("üìà Bi·ªÉu ƒë·ªì")
        st.image(chart_top)
        st.image(chart_bot)
        st.image(chart_all)

        if st.button("üìÑ Xu·∫•t b√°o c√°o Word", key="tab1_word"):
            tong_quan = {
                "T·ªïng c√¥ng t∆° ƒë√£ th·ª±c hi·ªán": f"{total_current:,}",
                "K·∫ø ho·∫°ch giao": f"{total_plan:,}",
                "T·ªëc ƒë·ªô TB/ng√†y": f"{avg_per_day:.2f}",
                "D·ª± b√°o ƒë·∫øn 30/09/2025": f"{int(forecast_total):,}",
                "T·ª∑ l·ªá d·ª± b√°o": f"{forecast_ratio*100:.2f}%",
                "ƒê√°nh gi√°": danh_gia
            }
            word_file = export_word_report(tong_quan, df_cleaned[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]], top_3, bot_3, [chart_top, chart_bot, chart_all], nhan_xet, filename="Bao_cao_HeThongDoDem.docx")
            st.download_button("üì• T·∫£i b√°o c√°o Word", data=word_file, file_name="Bao_cao_HeThongDoDem.docx")
