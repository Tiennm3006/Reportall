import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from chromadb import PersistentClient
from docx import Document
from docx.shared import Inches
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from io import BytesIO
import os

st.set_page_config(page_title="B√°o c√°o c√¥ng t√°c kinh doanh", layout="wide")
st.title("üìä B√°o c√°o c√¥ng t√°c kinh doanh")

# Tabs chia hai ph·∫ßn
tab1, tab2 = st.tabs(["üìã Ki·ªÉm tra h·ªá th·ªëng ƒëo ƒë·∫øm", "üîå C·∫Øt ƒëi·ªán do ch∆∞a tr·∫£ ti·ªÅn"])

# ---------- KH·ªûI T·∫†O CHROMADB ---------- #
client = PersistentClient(path="./chroma_storage")
collection = client.get_or_create_collection(name="baocao_files")

# ---------- H√ÄM X·ª¨ L√ù ---------- #
def save_bar_chart(data, x_col, y_col, title):
    fig, ax = plt.subplots()
    ax.bar(data[x_col], data[y_col])
    ax.set_title(title)
    ax.set_ylabel(y_col)
    ax.tick_params(axis='x', rotation=45)
    fig.tight_layout()
    buffer = BytesIO()
    fig.savefig(buffer, format='png')
    plt.close(fig)
    buffer.seek(0)
    return buffer

def save_overall_chart(data, x_col, y_col, title):
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.bar(data[x_col], data[y_col])
    ax.set_title(title)
    ax.set_ylabel(y_col)
    ax.tick_params(axis='x', rotation=45)
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f"{height:,.0f}", xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3), textcoords="offset points", ha='center', va='bottom')
    fig.tight_layout()
    buffer = BytesIO()
    fig.savefig(buffer, format='png')
    plt.close(fig)
    buffer.seek(0)
    return buffer

def set_table_border(table):
    tbl = table._tbl
    tblPr = tbl.tblPr if tbl.tblPr is not None else tbl._element.get_or_add_tblPr()
    tblBorders = OxmlElement('w:tblBorders')
    for border_name in ['top', 'left', 'bottom', 'right', 'insideH', 'insideV']:
        border = OxmlElement(f'w:{border_name}')
        border.set(qn('w:val'), 'single')
        border.set(qn('w:sz'), '4')
        border.set(qn('w:space'), '0')
        border.set(qn('w:color'), 'auto')
        tblBorders.append(border)
    tblPr.append(tblBorders)

def export_word_report(tong_quan, full_df, top3, bot3, charts, nhan_xet, filename):
    doc = Document()
    doc.add_heading("B√ÅO C√ÅO ƒê√ÅNH GI√Å", 0)

    doc.add_heading("T·ªïng quan", level=1)
    for k, v in tong_quan.items():
        doc.add_paragraph(f"{k}: {v}")

    doc.add_heading("Nh·∫≠n x√©t", level=1)
    doc.add_paragraph(nhan_xet)

    def add_table(title, df):
        doc.add_heading(title, level=2)
        table = doc.add_table(rows=1, cols=len(df.columns))
        table.style = 'Table Grid'
        hdr_cells = table.rows[0].cells
        for i, col in enumerate(df.columns):
            hdr_cells[i].text = str(col)
        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, val in enumerate(row):
                row_cells[i].text = str(val)
        set_table_border(table)

    add_table("To√†n b·ªô d·ªØ li·ªáu", full_df)
    add_table("Top 3 cao nh·∫•t", top3)
    add_table("Top 3 th·∫•p nh·∫•t", bot3)

    doc.add_heading("Bi·ªÉu ƒë·ªì minh h·ªça", level=1)
    for chart in charts:
        doc.add_picture(chart, width=Inches(5.5))

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# ---------- TAB 1 ---------- #
with tab1:
    uploaded_file = st.file_uploader("T·∫£i l√™n file Excel ch·ª©a sheet 'Tong hop luy ke'", type=["xlsx"], key="kiemtra")

    if uploaded_file:
        df = pd.read_excel(uploaded_file, sheet_name="Tong hop luy ke", header=None)
        df_cleaned = df.iloc[4:].copy()
        df_cleaned.columns = ["STT", "ƒêi·ªán l·ª±c", "1P_GT", "1P_TT", "3P_GT", "3P_TT",
                              "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
        df_cleaned = df_cleaned[df_cleaned["ƒêi·ªán l·ª±c"].notna()]
        cols_to_numeric = ["1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
        df_cleaned[cols_to_numeric] = df_cleaned[cols_to_numeric].apply(pd.to_numeric, errors='coerce')
        df_cleaned["T·ª∑ l·ªá"] = df_cleaned["T·ª∑ l·ªá"] * 100

        total_current = df_cleaned["T·ªïng c√¥ng t∆°"].sum()
        total_plan = df_cleaned["K·∫ø ho·∫°ch"].sum()
        current_date = datetime.now()
        days_passed = (current_date - datetime(2025, 1, 1)).days
        days_total = (datetime(2025, 9, 30) - datetime(2025, 1, 1)).days
        avg_per_day = total_current / days_passed
        forecast_total = avg_per_day * days_total
        forecast_ratio = forecast_total / total_plan
        danh_gia = "‚úÖ ƒê·∫†T k·∫ø ho·∫°ch" if forecast_ratio >= 1 else "‚ùå CH∆ØA ƒê·∫†T k·∫ø ho·∫°ch"

        nhan_xet = f"T√≠nh ƒë·∫øn hi·ªán t·∫°i, kh·ªëi l∆∞·ª£ng c√¥ng t√°c ƒë·∫°t kho·∫£ng {forecast_ratio*100:.1f}%. V·ªõi t·ªëc ƒë·ªô trung b√¨nh hi·ªán nay ({avg_per_day:.2f} thi·∫øt b·ªã/ng√†y), d·ª± b√°o t·ªïng th·ª±c hi·ªán ƒë·∫øn 30/09/2025 l√† {int(forecast_total):,} thi·∫øt b·ªã. Do ƒë√≥, {danh_gia.lower()}."

        df_sorted = df_cleaned.sort_values(by="T·ª∑ l·ªá", ascending=False)
        top_3 = df_sorted.head(3)
        bottom_3 = df_sorted.tail(3)

        st.subheader("T·ªïng quan v√† d·ª± b√°o")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T·ªïng ƒë√£ th·ª±c hi·ªán", f"{total_current:,}")
            st.metric("K·∫ø ho·∫°ch", f"{total_plan:,}")
            st.metric("T·ªëc ƒë·ªô TB/ng√†y", f"{avg_per_day:.2f}")
        with col2:
            st.metric("D·ª± b√°o ƒë·∫øn 30/09/2025", f"{int(forecast_total):,}")
            st.metric("T·ª∑ l·ªá d·ª± b√°o", f"{forecast_ratio*100:.2f}%")
            st.info(danh_gia)

        st.subheader("Top 3 t·ª∑ l·ªá cao nh·∫•t")
        st.dataframe(top_3[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]])

        st.subheader("Bottom 3 t·ª∑ l·ªá th·∫•p nh·∫•t")
        st.dataframe(bottom_3[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]])

        chart_top = save_bar_chart(top_3, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "Top 3 T·ª∑ l·ªá cao")
        chart_bot = save_bar_chart(bottom_3, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "Bottom 3 T·ª∑ l·ªá th·∫•p")
        chart_all = save_overall_chart(df_sorted, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "T·ªïng h·ª£p T·ª∑ l·ªá ho√†n th√†nh")

        st.image(chart_top)
        st.image(chart_bot)
        st.image(chart_all)

        if st.button("üìÑ Xu·∫•t b√°o c√°o Word", key="xuat_tab1"):
            tong_quan = {
                "T·ªïng ƒë√£ th·ª±c hi·ªán": f"{total_current:,}",
                "K·∫ø ho·∫°ch": f"{total_plan:,}",
                "T·ªëc ƒë·ªô TB/ng√†y": f"{avg_per_day:.2f}",
                "D·ª± b√°o ƒë·∫øn 30/09/2025": f"{int(forecast_total):,}",
                "T·ª∑ l·ªá d·ª± b√°o": f"{forecast_ratio*100:.2f}%",
                "ƒê√°nh gi√°": danh_gia
            }
            report = export_word_report(tong_quan, df_cleaned[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]], top_3, bottom_3, [chart_top, chart_bot, chart_all], nhan_xet, filename="Bao_cao_tab1.docx")
            st.download_button("üì• T·∫£i b√°o c√°o", data=report, file_name="Bao_cao_tab1.docx")

# ---------- TAB 2 ---------- #
with tab2:
    st.subheader("Ph√¢n t√≠ch c√¥ng t√°c c·∫Øt ƒëi·ªán do ch∆∞a tr·∫£ ti·ªÅn")

    uploaded_cut = st.file_uploader("T·∫£i l√™n file Excel c√¥ng t√°c c·∫Øt ƒëi·ªán", type=["xlsx"], key="cut")

    if uploaded_cut:
        df_cut = pd.read_excel(uploaded_cut)
        df_cut.columns = df_cut.columns.str.strip()

        if "ƒêi·ªán l·ª±c" not in df_cut.columns:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt 'ƒêi·ªán l·ª±c' trong file Excel. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            st.stop()

        df_cut = df_cut.dropna(subset=["ƒêi·ªán l·ª±c"])
        df_cut = df_cut[df_cut["ƒêi·ªán l·ª±c"].str.upper() != "T·ªîNG"]

        df_cut["Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán"] = df_cut["Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán"].astype(int)
        df_cut["S·ªë ti·ªÅn"] = df_cut["S·ªë ti·ªÅn"].astype(float)

        st.write("### D·ªØ li·ªáu c√¥ng t√°c c·∫Øt ƒëi·ªán")
        st.dataframe(df_cut)

        top_kh = df_cut.sort_values(by="Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán", ascending=False).head(3)
        bot_kh = df_cut.sort_values(by="Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán", ascending=True).head(3)

        top_tien = df_cut.sort_values(by="S·ªë ti·ªÅn", ascending=False).head(3)
        bot_tien = df_cut.sort_values(by="S·ªë ti·ªÅn", ascending=True).head(3)

        st.write("### üìå T·ªïng quan")
        tong_kh = df_cut['Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán'].sum()
        tong_tien = df_cut['S·ªë ti·ªÅn'].sum()
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T·ªïng kh√°ch h√†ng ch∆∞a c·∫Øt", f"{tong_kh:,}")
        with col2:
            st.metric("T·ªïng s·ªë ti·ªÅn", f"{tong_tien:,.0f} ƒë")

        st.write("### üîº Top 3 KH ch∆∞a c·∫Øt cao nh·∫•t")
        st.dataframe(top_kh[["ƒêi·ªán l·ª±c", "Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán"]])
        st.write("### üîΩ Top 3 KH ch∆∞a c·∫Øt th·∫•p nh·∫•t")
        st.dataframe(bot_kh[["ƒêi·ªán l·ª±c", "Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán"]])

        st.write("### üí∞ Top 3 s·ªë ti·ªÅn n·ª£ cao nh·∫•t")
        st.dataframe(top_tien[["ƒêi·ªán l·ª±c", "S·ªë ti·ªÅn"]])
        st.write("### üí∏ Top 3 s·ªë ti·ªÅn n·ª£ th·∫•p nh·∫•t")
        st.dataframe(bot_tien[["ƒêi·ªán l·ª±c", "S·ªë ti·ªÅn"]])

        chart_kh = save_bar_chart(top_kh, "ƒêi·ªán l·ª±c", "Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán", "Top 3 KH ch∆∞a c·∫Øt")
        chart_tien = save_bar_chart(top_tien, "ƒêi·ªán l·ª±c", "S·ªë ti·ªÅn", "Top 3 S·ªë ti·ªÅn n·ª£")
        chart_all_kh = save_overall_chart(df_cut, "ƒêi·ªán l·ª±c", "Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán", "T·ªïng KH ch∆∞a c·∫Øt theo ƒêi·ªán l·ª±c")

        nhan_xet = f"Hi·ªán t·∫°i c√≤n {tong_kh:,} kh√°ch h√†ng ch∆∞a b·ªã c·∫Øt ƒëi·ªán v·ªõi t·ªïng s·ªë ti·ªÅn l√™n ƒë·∫øn {tong_tien:,.0f} ƒë. C·∫ßn r√† so√°t c√°c ƒë∆°n v·ªã c√≥ s·ªë l∆∞·ª£ng l·ªõn ho·∫∑c s·ªë ti·ªÅn cao ƒë·ªÉ ∆∞u ti√™n x·ª≠ l√Ω."

        st.image(chart_kh)
        st.image(chart_tien)
        st.image(chart_all_kh)

        if st.button("üìÑ Xu·∫•t b√°o c√°o Word", key="xuat_tab2"):
            tong_quan = {
                "T·ªïng KH ch∆∞a c·∫Øt": f"{tong_kh:,}",
                "T·ªïng s·ªë ti·ªÅn": f"{tong_tien:,.0f} ƒë"
            }
            report = export_word_report(tong_quan, df_cut[["ƒêi·ªán l·ª±c", "Kh√°ch h√†ng n·ª£ qu√° h·∫°n ch∆∞a c·∫Øt ƒëi·ªán", "S·ªë ti·ªÅn"]], top_kh, bot_kh, [chart_kh, chart_tien, chart_all_kh], nhan_xet, filename="Bao_cao_tab2.docx")
            st.download_button("üì• T·∫£i b√°o c√°o", data=report, file_name="Bao_cao_tab2.docx")
