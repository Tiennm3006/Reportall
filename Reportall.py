# [Gi·ªØ nguy√™n ph·∫ßn import v√† ƒë·ªãnh nghƒ©a h√†m x·ª≠ l√Ω nh∆∞ hi·ªán t·∫°i]

# ---------- TAB 1: PH√ÇN T√çCH H·ªÜ TH·ªêNG ƒêO ƒê·∫æM ---------- #
with tab1:
    uploaded_file = st.file_uploader("üì§ T·∫£i l√™n file Excel ch·ª©a sheet 'Tong hop luy ke'", type=["xlsx"], key="kiemtra")

    if uploaded_file:
        df = pd.read_excel(uploaded_file, sheet_name="Tong hop luy ke", header=None)
        df_cleaned = df.iloc[4:].copy()
        df_cleaned.columns = ["STT", "ƒêi·ªán l·ª±c", "1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
        df_cleaned = df_cleaned[df_cleaned["ƒêi·ªán l·ª±c"].notna()]
        cols_to_num = ["1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
        df_cleaned[cols_to_num] = df_cleaned[cols_to_num].apply(pd.to_numeric, errors='coerce')
        df_cleaned["T·ª∑ l·ªá"] = df_cleaned["T·ª∑ l·ªá"] * 100

        total_current = df_cleaned["T·ªïng c√¥ng t∆°"].sum()
        total_plan = df_cleaned["K·∫ø ho·∫°ch"].sum()
        current_date = datetime.now()
        days_passed = (current_date - datetime(2025, 1, 1)).days
        days_total = (datetime(2025, 9, 30) - datetime(2025, 1, 1)).days
        avg_per_day = total_current / days_passed
        forecast_total = avg_per_day * days_total
        forecast_ratio = forecast_total / total_plan

        danh_gia = "‚úÖ ƒê·∫†T k·∫ø ho·∫°ch" if forecast_ratio >= 1 else "‚ùå CH∆ØA ƒê·∫†T k·∫ø ho·∫°ch"
        nhan_xet = f"D·ª± ki·∫øn ƒë·∫øn 30/09/2025 s·∫Ω ho√†n th√†nh kho·∫£ng {forecast_total:,.0f} thi·∫øt b·ªã, t∆∞∆°ng ƒë∆∞∆°ng {forecast_ratio*100:.2f}%. {danh_gia}"

        df_sorted = df_cleaned.sort_values(by="T·ª∑ l·ªá", ascending=False)
        top_3 = df_sorted.head(3)
        bot_3 = df_sorted.tail(3)

        chart_top = save_bar_chart(top_3, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "Top 3 T·ª∑ l·ªá cao")
        chart_bot = save_bar_chart(bot_3, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "Bottom 3 T·ª∑ l·ªá th·∫•p")
        chart_all = save_overall_chart(df_sorted, "ƒêi·ªán l·ª±c", "T·ª∑ l·ªá", "T·ªïng h·ª£p t·ª∑ l·ªá ho√†n th√†nh")

        st.metric("T·ªïng ƒë√£ th·ª±c hi·ªán", f"{total_current:,}")
        st.metric("K·∫ø ho·∫°ch", f"{total_plan:,}")
        st.metric("D·ª± b√°o ƒë·∫øn 30/09/2025", f"{int(forecast_total):,}")
        st.metric("T·ª∑ l·ªá d·ª± b√°o", f"{forecast_ratio*100:.2f}%")
        st.info(nhan_xet)

        st.subheader("üìà Bi·ªÉu ƒë·ªì")
        st.image(chart_top)
        st.image(chart_bot)
        st.image(chart_all)

        if st.button("üìÑ Xu·∫•t b√°o c√°o Word", key="tab1_word"):
            tong_quan = {
                "T·ªïng c√¥ng t∆° ƒë√£ th·ª±c hi·ªán": f"{total_current:,}",
                "K·∫ø ho·∫°ch giao": f"{total_plan:,}",
                "T·ªëc ƒë·ªô TB/ng√†y": f"{avg_per_day:.2f}",
                "D·ª± b√°o ƒë·∫øn 30/09/2025": f"{int(forecast_total):,}",
                "T·ª∑ l·ªá d·ª± b√°o": f"{forecast_ratio*100:.2f}%",
                "ƒê√°nh gi√°": danh_gia
            }
            word_file = export_word_report(tong_quan, df_cleaned[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]], top_3, bot_3, [chart_top, chart_bot, chart_all], nhan_xet, filename="Bao_cao_HeThongDoDem.docx")
            st.download_button("üì• T·∫£i b√°o c√°o Word", data=word_file, file_name="Bao_cao_HeThongDoDem.docx")
